hydra:
  job:
    chdir: false


experiment:
  method: dond_run_train
  description: "Easy. They should be learning."
  nb_epochs: 20
  nb_matches_per_iteration: 30
  reinit_matches_each_it: true
  start_epoch: 0
  resume_experiment: true




training:
  keep_error_messages: False
  llama:
    adapters:
      ad_alice:
        train_func: train_reinforce_main
        train_func_args: {}


      ad_bob:
        train_func: train_reinforce_main
        train_func_args: {}


models:

  llama:
    class: hf
    init_args:
      name: 'llama'
      adapter_names: ['ad_alice', 'ad_bob']
      max_model_length: 8000
      include_value_head: false
      device: "cuda"
      model_name: "meta-llama/Llama-3.1-8B-Instruct"
      pretrained_args:
        pretrained_model_name_or_path: "meta-llama/Llama-3.1-8B-Instruct"
        torch_dtype: "float16"
        device_map: "auto"
        attn_implementation: "flash_attention_2"
      bits_and_bytes_args: null
        #load_in_8bit: False
        #load_in_4bit: true
      lora_args:
        task_type: TaskType.CAUSAL_LM
        r: 64
        lora_alpha: 32
        lora_dropout: 0.0
        target_modules: "all-linear"

      generation_args:
        max_new_tokens: 100
        do_sample: True
        temperature: 1.0
        top_k: 0.0
        top_p: 1.0
        repetition_penalty: 0.0

      keep_vllm_during_training: False
      keep_hf_during_training: True
      keep_hf_during_eval: False
      keep_vllm_during_eval: True
      eval_with: "vllm"
      train_with: "hf"
      random_seed: 200


matches:

  stop_condition: game_over_condition
  stop_condition_kwargs: {}

  run_matches_args:
    nb_parallel_matches: -1
    log_func: independant_players_logging
    log_func_args:
      metrics_func: gather_dond_statistics
      metrics_func_args:
        stats_to_log: [
        "agreement_percentage",
        "points",
        "points_on_agreement",
        "items_given_to_self"
        ]
      training_data_func: set_discounted_returns
      training_data_func_args:
        discount_factor: 0.96
        
  dond_game_args:
    rounds_per_game: 1
    max_turns: 1
    mode: basic
    random_setup_func: fixed_manual
    random_setup_kwargs:
      items: ['coins']
      quantities: [10]
      val_starting_negotiator: [1]
      val_responding_negotiator: [1]
    role_assignator_func: fixed_role_assignator
    role_assignator_func_kwargs: {}

  players:

    alice:

      dond_player_args:
      
        mod_adpt_id: 'llama/ad_alice'
        allow_reasoning: false
        max_retries: 1
        max_reasoning_chars: 0
        max_messages: 0
        max_chars_per_message: 0
        intro_prompt: ${prompt_blocks.dond_game_intro_prompt}
        goal_prompt: ${prompt_blocks.normal_goal}
        new_round_prompt: ${prompt_blocks.new_round_prompt}
        initial_move_prompt: ${prompt_blocks.initial_play_prompt}
        ongoing_moves_prompt: ${prompt_blocks.ongoing_play_prompt}
        proposal_prompt: ${prompt_blocks.see_through_glass_proposal_prompt}

    bob:

      dond_player_args:

        mod_adpt_id: 'llama/ad_bob'
        allow_reasoning: false
        max_retries: 1
        max_reasoning_chars: 100
        max_messages: 5
        max_chars_per_message: 50
        intro_prompt: ${prompt_blocks.dond_game_intro_prompt}
        goal_prompt: ${prompt_blocks.normal_goal}     
        new_round_prompt: ${prompt_blocks.new_round_prompt}
        initial_move_prompt: ${prompt_blocks.initial_play_prompt}
        ongoing_moves_prompt: ${prompt_blocks.ongoing_play_prompt}
        proposal_prompt: ${prompt_blocks.see_through_glass_proposal_prompt}


prompt_blocks:

  dond_game_intro_prompt: |

    Welcome the game. 
    In this game, two players divide items from one or more categories.
    Each categories might have different values for each player.

    Game Rules:
    - Points are obtained by multiplying the quantity of items you acquire by their respective values.
    - If the proposals of both players do not match exactly, both players will receive zero points.

    Player Mechanics:
      A valid proposal is of the form:
      <propose>{ "i_take": {"item_category1": x, "item_category2": y}, "other_player_gets": {"item_category1": y, "item_category2": x} }</propose>
      All of your responses must be within <think></think>, <message></message>, or <propose></propose> tags.


  new_round_prompt: |
    Last round info: {last_round_info}
    You are now playing round {current_round}/{nb_rounds}.
    For this round, the quantities are {quantities}.
    To you, the items are worth {values}.

  initial_play_prompt: |
    You are the first to play:

  ongoing_play_prompt: |
    The other player sent you this message: <message>{last_message}</message>

  see_through_glass_proposal_prompt: |
    You have reached the proposal stage. 
    The other player's proposal was for you to take: {other_player_gets} and for them to take: {i_take}.
    Please make your proposal decision now. 

  second_player_proposal_prompt: |
    The other player's proposal was for you to take: {other_player_gets} and for them to take: {i_take}.
    Please make your proposal decision now.

  unformatted_goal: |
    ""

  normal_goal: |
    Goal: Maximize your points by strategic negotiation.

  agressive_goal: |
    Goal: Maximize your points by strategic negotiation.

  fair_goal: |
    Goal: Aim to reach a fair agreement quickly.


