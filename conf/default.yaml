hydra:
  job:
    chdir: false
    name: default
  run:
    dir: ${oc.env:EXP_OUT}/${hydra.job.name}/${now:%Y-%m-%d}/${now:%H-%M-%S}

experiment:
  method: dond_run_train
  description: "Easy. They should be learning."
  nb_epochs: 500
  nb_matches_per_iteration: 32
  reinit_matches_each_it: true
  start_epoch: 0
  resume_experiment: true
  base_seed: 33
  # random_seeds: [33, 53, 97, 157, 468, 484, 2959, 5145, 6368, 8602]

training:
  keep_error_messages: False
  llama:
    adapters:

      ad_alice:
        train_func: train_reinforce_main
        train_func_args:
          temperature: 1
          learning_rate: 1e-6
          entropy_coef: 0 # Temperature parameter for entropy regularization


      ad_bob:
        train_func: train_reinforce_main
        train_func_args:
          temperature: 1
          learning_rate: 1e-6
          entropy_coef: 0 # Temperature parameter for entropy regularization

models:
  llama:
    class: hf
    init_args:
      name: 'llama'
      adapter_names: ['ad_alice', 'ad_bob']
      max_model_length: 8000
      include_value_head: false
      device: "cuda"
      model_name: "/network/weights/llama.var/llama_3.1/Meta-Llama-3.1-8B-Instruct"
      pretrained_args:
        pretrained_model_name_or_path: ${models.llama.init_args.model_name}
        torch_dtype: "bfloat16"
        device_map: "auto"
        attn_implementation: "flash_attention_2"
      bits_and_bytes_args: null
        #load_in_8bit: False
        #load_in_4bit: true
      lora_args:
        task_type: CAUSAL_LM
        r: 64
        lora_alpha: 32
        lora_dropout: 0.0
        target_modules: "all-linear"

      generation_args:
        max_new_tokens: 100
        do_sample: True
        temperature: 1.0
        top_k: 0.0
        top_p: 1.0
        repetition_penalty: 0.0

      keep_vllm_during_training: False
      keep_hf_during_training: True
      keep_hf_during_eval: False
      keep_vllm_during_eval: True
      eval_with: "vllm"
      train_with: "hf"

matches:

  stop_condition: game_over_condition
  stop_condition_kwargs: {}

  run_matches_args:
    nb_parallel_matches: -1
    log_func: players_logging_and_html
    log_func_args:
      metrics_func: gather_dond_statistics
      metrics_func_args:
        stats_to_log: [
        "agreement_percentage",
        "points",
        "points_on_agreement",
        "items_given_to_self"
        ]
      training_data_func: set_discounted_scores
      training_data_func_args:
        discount_factor: 1.0

  dond_game_args:
    rounds_per_game: 1
    max_messages: 0
    min_messages: 0
    mode: basic
    random_setup_func: fixed_manual
    random_setup_kwargs:
      items: ['coins']
      quantities: [10]
      val_starting_negotiator: [1]
      val_responding_negotiator: [1]
    role_assignator_func: fixed_role_assignator
    role_assignator_func_kwargs: {}

  players:

    alice:

      dond_player_args:

        policy_id: 'llama/ad_alice'
        allow_reasoning: false
        max_errors: 1
        max_reasoning_chars: 0
        intro_prompt: ${prompt_blocks.barebone_ultimatum2}
        goal_prompt: ${prompt_blocks.agressive_goal}
        new_round_prompt: null
        player_with_first_move_prompt: "You are the first player. It is your turn to play."
        received_message_prompt: null
        first_round_prompt: null
        other_player_finalized_prompt: ${prompt_blocks.visible_finalization_prompt}

    bob:

      dond_player_args:

        policy_id: 'llama/ad_bob'
        allow_reasoning: false
        max_errors: 1
        max_reasoning_chars: 0
        intro_prompt: ${prompt_blocks.barebone_ultimatum2}
        goal_prompt: ${prompt_blocks.agressive_goal}
        new_round_prompt: null
        player_with_first_move_prompt: null
        received_message_prompt: null
        first_round_prompt: null
        other_player_finalized_prompt: ${prompt_blocks.visible_finalization_prompt}


prompt_blocks:

  barebone_ultimatum: |

    Welcome, you are playing the splitting game.

    Game Description:

      1) In this game, two players divide 10 coins among themselves.

      2) A finalization is a proposed division of the coins between the two players.

      3) The first player will make a finalization.
      The second player must then make his finalization.
      Each player can make a single finalization for the entire game, hence the name.

      4) In order for both players to agree, the finalizations must be complementary. If no agreement is reached between the two players with the two finalizations, both players will receive zero points. If agreement is reached, the players will receive the coins corresponding to the finalizations.


    Response Formatting:

      1) All of your responses must be within <finalize></finalize> tags.

      2) The division must be in a JSON-parsable format. Formatting: Final division: <finalize> {"i_take": {"coins": x}, "other_player_gets": {"coins": y}} </finalize> where "i_take" represents your share and "other_player_gets" represents the other player's share of the coins.

  barebone_ultimatum2: |

    Welcome to the Splitting Game.

    Game Overview:

      1) Two players divide 10 coins.

      2) Each player proposes a division of the coins.

      3) Both players must agree on a division to receive the coins. If not, both receive zero coins.

      4) The game is played only once.

    Response Format:

      1) Responses must be within <finalize> </finalize> tags.

      2) Use JSON format: <finalize> {"i_take": {"coins": x}, "other_player_gets": {"coins": y}} </finalize>.

  dond_game: |

    Welcome to the splitting game.

    Game Description:

      1) In this game, two players divide {quantities} among themselves.

      2) The points each player obtains is the number of items they get at the end of the game.

      3) After the number of items and values have been shown, the first player will make a finalization. A finalization is proposed division of the items between the two players.

      4) The second player must then make his finalization.

      5) Each player can make a single finalization for the entire game, hence the name.

      6) In order for both players to agree, the finalizations must be complementary. If no agreement is reached between the two players with the two finalizations, both players will receive zero points.

    Response Formatting:

      1) All of your responses must be within <finalize></finalize> tags.

      2) The division must be in a JSON-parsable format. Formatting: Final division: <finalize>{ "i_take": {"item_category1": x, "item_category2": y}, "other_player_gets": {"item_category1": y, "item_category2": x} }</finalize> where 'i_take' represents your share and 'other_player_gets' represents the other player's share of the item categories.

  barebone_round_prompt: |
    ""

  initial_play_prompt: |
    You are the first player. It is your turn to play.

  ongoing_play_prompt: |
    The other player sent you this message: <message>{last_message}</message>

  visible_finalization_prompt: |
    The other player's finalization was {other_player_finalization}.
    You are the second player. It is your turn to play.

  second_player_finalization_prompt: |
    The other player's finalization was {other_player_finalization}.
    It is your turn to play.

  unbiased_goal: null

  normal_goal: |
    Your points will be the number of coins you get at the end of the game.

  agressive_goal: |
    Your goal is to get as many coins as possible.

  agressive_pair_goal: |
    Your goal is to get as many coins as possible.
    This is also the goal of the other player.

  fair_goal: |
    Goal: Aim to be fair with both the other player and yourself.

  submitted_goal: |
    Goal: Your goal is to do exactly what the other player wants. You must make the other player happy.


