hydra:
  job:
    chdir: false


experiment:
  method: dond_run_train
  description: "Easy. They should be learning."
  nb_epochs: 20
  nb_matches_per_iteration: 32
  reinit_matches_each_it: true
  start_epoch: 0
  resume_experiment: false

training:
  keep_error_messages: False
  llama:
    adapters:
      ad_alice:
        train_func: train_reinforce_main
        train_func_args: {}


      ad_bob:
        train_func: train_reinforce_main
        train_func_args: {}


models:

  llama:
    class: hf
    init_args:
      name: 'llama'
      adapter_names: ['ad_alice', 'ad_bob']
      max_model_length: 8000
      include_value_head: false
      device: "cuda"
      model_name: "meta-llama/Llama-3.1-8B-Instruct"
      pretrained_args:
        pretrained_model_name_or_path: "meta-llama/Llama-3.1-8B-Instruct"
        torch_dtype: "bfloat16"
        device_map: "auto"
        attn_implementation: "flash_attention_2"
      bits_and_bytes_args: null
        #load_in_8bit: False
        #load_in_4bit: true
      lora_args:
        task_type: TaskType.CAUSAL_LM
        r: 64
        lora_alpha: 32
        lora_dropout: 0.0
        target_modules: "all-linear"

      generation_args:
        max_new_tokens: 100
        do_sample: True
        temperature: 1.0
        top_k: 0.0
        top_p: 1.0
        repetition_penalty: 0.0

      keep_vllm_during_training: False
      keep_hf_during_training: True
      keep_hf_during_eval: False
      keep_vllm_during_eval: True
      eval_with: "vllm"
      train_with: "hf"
      random_seed: 40

matches:

  stop_condition: game_over_condition
  stop_condition_kwargs: {}

  run_matches_args:
    nb_parallel_matches: -1
    log_func: independant_players_logging
    log_func_args:
      metrics_func: gather_dond_statistics
      metrics_func_args:
        stats_to_log: [
        "agreement_percentage",
        "points",
        "points_on_agreement",
        "items_given_to_self"
        ]
      training_data_func: set_discounted_returns
      training_data_func_args:
        discount_factor: 0.96
        
  dond_game_args:
    rounds_per_game: 1
    max_turns: 1
    mode: basic
    random_setup_func: fixed_manual
    random_setup_kwargs:
      items: ['coins']
      quantities: [10]
      val_starting_negotiator: [1]
      val_responding_negotiator: [1]
    role_assignator_func: fixed_role_assignator
    role_assignator_func_kwargs: {}

  players:

    alice:

      dond_player_args:
      
        mod_adpt_id: 'llama/ad_alice'
        allow_reasoning: false
        max_retries: 1
        max_reasoning_chars: 0
        max_messages: 0
        max_chars_per_message: 0
        intro_prompt: ${prompt_blocks.barebone_ultimatum}
        goal_prompt: ${prompt_blocks.unformatted_goal}
        new_round_prompt: ${prompt_blocks.new_round_prompt}
        initial_move_prompt: ${prompt_blocks.initial_play_prompt}
        ongoing_moves_prompt: ${prompt_blocks.ongoing_play_prompt}
        finalization_prompt: ${prompt_blocks.see_through_glass_finalization_prompt}

    bob:

      dond_player_args:

        mod_adpt_id: 'llama/ad_bob'
        allow_reasoning: false
        max_retries: 1
        max_reasoning_chars: 100
        max_messages: 5
        max_chars_per_message: 50
        intro_prompt: ${prompt_blocks.barebone_ultimatum}
        goal_prompt: ${prompt_blocks.unformatted_goal}     
        new_round_prompt: ${prompt_blocks.new_round_prompt}
        initial_move_prompt: ${prompt_blocks.initial_play_prompt}
        ongoing_moves_prompt: ${prompt_blocks.ongoing_play_prompt}
        finalization_prompt: ${prompt_blocks.see_through_glass_finalization_prompt}


prompt_blocks:

  barebone_ultimatum: |

    Welcome to the splitting game. 

    Game Description:

      1) In this game, two players divide {quantities} among themselves.

      2) The points each player obtains is the number of items they get at the end of the game.

      3) After the number of items and values have been shown, the first player will make a finalization. A finalization is proposed division of the items between the two players.

      4) The second player must then make his finalization. 

      5) Each player can make a single finalization for the entire game, hence the name.

      6) In order for both players to agree, the finalizations must be complementary. If no agreement is reached between the two players with the two finalizations, both players will receive zero points.


    Response Formatting:

      1) All of your responses must be within <finalize></finalize> tags.

      2) The division must be in a JSON-parsable format. Formatting: Final division: <finalize>{ "i_take": {"item_category1": x, "item_category2": y}, "other_player_gets": {"item_category1": y, "item_category2": x} }</finalize> where 'i_take' represents your share and 'other_player_gets' represents the other player's share of the item categories.

  new_round_prompt: |
    Last round info: {last_round_info}
    You are now playing round {current_round}/{nb_rounds}.
    For this round, the quantities are {quantities}.
    To you, the items are worth {values}.

  initial_play_prompt: |
    You are the first to play:

  ongoing_play_prompt: |
    The other player sent you this message: <message>{last_message}</message>

  see_through_glass_finalization_prompt: |
    The other player's finalization was {other_player_finalization}.
    Please make your finalization decision now. 

  second_player_finalization_prompt: |
    The other player's finalization was {other_player_finalization}.
    Please make your finalization decision now.

  unformatted_goal: |
    ""

  normal_goal: |
    Goal: Maximize your points.

  agressive_goal: |
    Goal: Maximize your points by strategic negotiation.

  fair_goal: |
    Goal: Aim to reach a fair agreement quickly.

  submitted_goal: |
    Goal: Your goal is to do exactly what the other player wants. You must make the other player happy. Your proposal should match the other player's proposal. Exactly please. Exactly please! 


