hydra:
  run:                  
    dir: "/home/mila/d/dereck.piche/scratch/${now:%Y-%m-%d___%H-%M-%S}___${experiment.name}"
  job:
    chdir: false

experiment:
  name: "multi_round_dond_4_rounds_easier_collab"
  method: dond_run_train
  description: "no description"
  nb_epochs: 1000
  nb_matches_per_iteration: 32
  reinit_matches_each_it: true
  start_epoch: 0
  resume_experiment: false

####################################################################################################
#                                           GENERATION                                               
####################################################################################################

matches:

  stop_condition: game_over_condition
  stop_condition_kwargs: {}

  run_matches_args:
    nb_parallel_matches: -1
    log_func: players_logging_and_html
    log_func_args:
      metrics_func: gather_dond_statistics
      metrics_func_args:
        stats_to_log: [
        "agreement_percentage",
        "points",
        "points_on_agreement",
        "items_given_to_self",
        "quantities",
        "values",
        "imbalance_on_agreement",
        "points_difference_on_agreement",
        "greedy_dominant_points_difference_on_agreement",
        "greedy_submission_points_difference_on_agreement",
        "cooperative_points_difference_on_agreement",
        "split_equal_points_difference_on_agreement",
        "total_coop_points_difference_on_agreement_player",
        "total_coop_points_difference_on_agreement_coplayer",
        "total_imbalance_on_agreement",
        "total_points_difference_on_agreement",
        "total_coop_points_difference_player",
        "total_coop_points_difference_coplayer"
        ]
      training_data_func: bicameral_vals_assignator
      training_data_func_args:
        items: ['coins']
        min_quant: 1
        max_quant: 12
        low_val_mean: 3
        low_val_std: 1
        high_val_mean: 15
        high_val_std: 1
        
  dond_game_args:
    rounds_per_game: 4
    max_messages: 3
    min_messages: 1
    max_chars_per_message: 400
    mode: basic
    random_setup_func: uniform_quant_random_vals
    random_setup_kwargs:
      items: ['coins'] # ['hats', 'balls', 'books']
      min_quant: 1
      max_quant: 12
      min_val: 1
      max_val: 10
    role_assignator_func: alternating_role_assignator
    role_assignator_func_kwargs: {}

  players:

    alice:

      dond_player_args:
        mod_adpt_id: 'llama/ad_alice'
        max_errors: 2
        allow_reasoning: true
        max_reasoning_chars: 400
        intro_prompt: ${prompt_blocks.dond_game_multiple_rounds}
        message_mechanics_prompt: ${prompt_blocks.dond_message_mechanics}
        dond_version_specificities: ${prompt_blocks.dond_visible_alternating_starting_player}
        reasoning_mechanics_prompt: ${prompt_blocks.dond_reasoning_mechanics}
        goal_prompt: ${prompt_blocks.dond_goal_long_term}
        first_round_prompt: ${prompt_blocks.first_round_prompt}
        new_round_prompt: ${prompt_blocks.new_round_prompt_with_values}
        player_with_first_move_prompt: "You are the first player. It is your turn to play."
        received_message_prompt: ${prompt_blocks.message_prompt}
        other_player_finalized_prompt: ${prompt_blocks.visible_finalization_prompt}

    bob:

      dond_player_args:
        mod_adpt_id: 'llama/ad_bob'
        max_errors: 2
        allow_reasoning: true
        max_reasoning_chars: 400
        intro_prompt: ${prompt_blocks.dond_game_multiple_rounds}
        message_mechanics_prompt: ${prompt_blocks.dond_message_mechanics}
        dond_version_specificities: ${prompt_blocks.dond_visible_alternating_starting_player}
        reasoning_mechanics_prompt: ${prompt_blocks.dond_reasoning_mechanics}
        goal_prompt: ${prompt_blocks.dond_goal_long_term}
        first_round_prompt: ${prompt_blocks.first_round_prompt}
        new_round_prompt: ${prompt_blocks.new_round_prompt_with_values}
        player_with_first_move_prompt: "You are the first player to make a move."
        received_message_prompt: ${prompt_blocks.message_prompt}
        other_player_finalized_prompt: ${prompt_blocks.visible_finalization_prompt}


models:

  llama:
    class: hf
    init_args:
      name: 'llama'
      adapter_names: ['ad_alice', 'ad_bob']
      max_model_length: 8000
      include_value_head: false
      device: "cuda"
      model_name: "meta-llama/Llama-3.1-8B-Instruct"
      pretrained_args:
        pretrained_model_name_or_path: ${models.llama.init_args.model_name}
        torch_dtype: "bfloat16"
        device_map: "auto"
        attn_implementation: "flash_attention_2"
      bits_and_bytes_args: null
        #load_in_8bit: False
        #load_in_4bit: true
      lora_args:
        task_type: TaskType.CAUSAL_LM
        r: 64
        lora_alpha: 32
        lora_dropout: 0.0
        target_modules: "all-linear"

      generation_args:
        max_new_tokens: 300
        do_sample: True
        temperature: 1.0
        top_k: 1
        top_p: 1.0
        repetition_penalty: 0.0

      keep_vllm_during_training: False
      keep_hf_during_training: True
      keep_hf_during_eval: False
      keep_vllm_during_eval: True
      eval_with: "vllm"
      train_with: "hf"
      random_seed: 500


####################################################################################################
# TRAINING                                             
####################################################################################################


training:
  keep_error_messages: False
  llama:
    adapters:
    
      ad_alice:
        train_func: train_reinforce_main
        train_func_args: 
          temperature: 1
          learning_rate: 3e-6

      ad_bob:
        train_func: train_reinforce_main
        train_func_args: 
          temperature: 1
          learning_rate: 3e-6


####################################################################################################
# PROMPT DEFINITIONS                                          
####################################################################################################

prompt_blocks:

  initial_play_prompt: |
    You are the first player. It is your turn to play. [Msg Limits → {remaining_messages}]

  message_prompt: |
    Other player's message: <message>{last_message}</message>. [Msg Limits → {remaining_messages}]

  visible_finalization_prompt: |
    Other Player's Finalization: {other_player_finalization}. [Msg Limits → {remaining_messages}]

  hidden_finalization_prompt: |
    The other player has submitted their finalization. It is now your turn to finalize. [Msg Limits → {remaining_messages}]


############################################################
# Ultimatum Game Prompts              
############################################################

  barebone_ultimatum: |
    Welcome, you are playing the splitting game.
    Game Description: 
      1) In this game, two players divide 10 coins among themselves.
      2) A finalization is a proposed division of the coins between the two players. 
      3) The first player will make a finalization. 
      The second player must then make his finalization. 
      Each player can make a single finalization for the entire game, hence the name.
      4) In order for both players to agree, the finalizations must be complementary. If no agreement is reached between the two players with the two finalizations, both players will receive zero points. If agreement is reached, the players will receive the coins corresponding to the finalizations.
    Response Formatting:
      1) All of your responses must be within <finalize></finalize> tags.
      2) The division must be in a JSON-parsable format. Formatting: Final division: <finalize> {"i_take": {"coins": x}, "other_player_gets": {"coins": y}} </finalize> where "i_take" represents your share and "other_player_gets" represents the other player's share of the coins.

  ultimatum_game_multiple_rounds: |
    Welcome, you are playing a multi-round splitting game.
    Game Description:
      1) In this game, two players will divide a collection of coins over multiple rounds.
      2) In each round, the available coins must be divided between both players.
      3) In every round, both players submit a finalization proposal outlining how the coins are split.
      4) If the two players do not propose the same split, both players receive zero points for that round.
      5) Once a player has proposed a split, the other player must also propose a split.
      6) Both players are assigned a value for each coin. The points each player receives are the product of the number of coins they get and the coin's value.
    Response Formatting:
      1) All your responses in each round must be enclosed within <finalize></finalize> tags.
      2) Specify the division in a JSON-parsable format. For example: <finalize> {"i_take": {"coins": x}, "other_player_gets": {"coins": y}} </finalize> where the numbers represent the counts of each object allocated to you and to your opponent.

  unbiased_goal: null

  normal_goal: |
    Your points will be the number of coins you get at the end of the game.

  agressive_goal: |
    Your goal is to get as many coins as possible.

  agressive_pair_goal: |
    Your goal is to get as many coins as possible. This is also the goal of the other player.

  fair_goal: |
    Goal: Aim to be fair with both the other player and yourself.

  submitted_goal: |
    Goal: Your goal is to do exactly what the other player wants. You must make the other player happy. 

############################################################
#                                                          #
#                      DOND Game Prompts                   #
#                                                          #
############################################################


  dond_game_multiple_rounds: |
    Welcome, you are participating in a multi-round negotiation game.
    Game Description:
      1) In this game, two players will divide a collection of items over multiple rounds.
      2) In each round, the available items of each category ({items}) and their corresponding quantities will be dynamically specified.
      3) In each round, the different item categories will have different values for each player.
      4) The points of each player in each round is determined by multiplying the number of items they receive by the value they assign to each item.
      5) Both players must submit a finalization proposal indicating how they wish to split the items.
      6) If the finalization proposals of both players do not match, neither player earns points for that round.
    Response Formatting:
      1) Enclose your finalization proposal within <finalize></finalize> tags.
      2) Provide your proposal in a JSON-parsable format ensuring that every expected item is included. For example:
         <finalize> {"i_take": {{finalize_sample_i_take}}, "other_player_gets": {{finalize_sample_other}}} </finalize>



  dond_normal_goal: |
    The points attributed to each player will be computed as the cumulative sum of their points over rounds, where each player's round score is determined by multiplying the quantity of each item they receive by the value they assign to each item. 

  dond_goal_long_term: |
    The points attributed to each player will be computed as the cumulative sum of their points over rounds, where each player's round score is determined by multiplying the quantity of each item they receive by the value they assign to each item. What matters is the total points each player has accumulated over all rounds, not the points they have accumulated in each round. This is not a zero-sum game. It is a general-sum game.

  dond_agressive_goal: |
    Your goal is to maximize your cumulative points, calculated by adding up, over rounds, the products of each item's quantity and the associated value (for you) at corresponding rounds. Aim for the highest possible total!

  dond_agressive_pair_goal: |
    Your goal is to maximize your cumulative points, calculated by adding up, over rounds, the products of each item's quantity and the associated value (for you) at corresponding rounds. This is also the goal of your opponent.

  dond_fair_goal: |
    Goal: Aim to be fair with both the other player and yourself. Remember, your points are awarded as the cumulative sum over rounds, with each round's score computed by multiplying the number of items received by their respective values.

  dond_submitted_goal: |
    Goal: Your objective is to exactly follow the other player's preferences to ensure their satisfaction. Note that your points accumulate over rounds as the product of the number of each item received and its corresponding value. 

  first_round_prompt: |
    For this new round, the items available are {quantities} and your assigned values are {values}. 

  new_round_prompt: |
    The previous round has ended. In the last round, you earned {last_round_points} points. For this new round, the items available are {quantities} and your assigned values are {values}. 

  new_round_prompt_with_values: |
    The previous round has ended. In the last round, you earned {last_round_points_computed}. Your coplayer earned {coplayer_last_round_points_computed_other}. Up to now, you have accumulated {cumulative_round_points_your} points and your coplayer has accumulated {cumulative_round_points_coplayer} points. For this new round, the items available are {quantities} and your assigned values are {values}. 

  dond_message_mechanics: |
    In order to communicate with the other player, you are allowed to send messages (distinct from finalizations). You cannot send a message and a finalization in the same response.
    When sending a message, please follow these rules: 1) Enclose your message entirely within <message> and </message> tags. 2) Do not include any extraneous text outside these tags. 3) In each round, send at least {min_messages} and no more than {max_messages} messages, with each message containing up to {max_chars_per_message} characters. 4) You may send only one message per response. 5) Use your messages strategically.
      
  dond_reasoning_mechanics: |
    In order to think before you act, you are allowed to use {max_reasoning_chars} characters per round. When reasoning, please follow these rules; 1) Enclose your thought process within <think> and </think> tags. 2) Do not include extraneous content outside these tags. 3) Your reasoning is limited to {max_reasoning_chars} characters per response. 4) You are not obligated to reason at each response.

  dond_hidden_alternating_starting_player: |
    In this version of the game, your finalization proposal (enclosed in <finalize> tags) will be hidden to your coplayer. The values attributed to the items by other players are hidden as well. However, there are no restrictions to what the players are allowed to reveal themselves in their messages! Furthermore, in this version, players alternate turns and the player with the first move changes each round. 

  dond_visible_alternating_starting_player: |
    In this version of the game, your finalization proposal (enclosed in <finalize> tags) will be shown to your coplayer. However, the values attributed to the items by other players are hidden. However, there are no restrictions to what the players are allowed to reveal themselves in their messages. Feel free to reveal your values in your messages. Furthermore, in this version, players alternate turns and the player with the first move changes each round.





