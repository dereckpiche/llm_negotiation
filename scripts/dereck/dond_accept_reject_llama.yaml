hydra:
  run:
    dir: "${oc.env:SCRATCH}/${now:%Y-%m-%d___%H-%M-%S}___${experiment.name}"
  job:
    chdir: false

experiment:
  name: "llama_aa_payoff"
  method: generate_and_train
  description: "no description"
  nb_epochs: 2000
  nb_matches_per_iteration: 32
  reinit_matches_each_it: true
  start_epoch: 0
  resume_experiment: true
  base_seed: 1

####################################################################################################
#                                           GENERATION
####################################################################################################


common_agent_kwargs: &common_agent_kwargs
  max_errors: 0
  allow_reasoning: false
  max_reasoning_chars: 0
  message_parser: regular_message_parser
  finalization_parser: accept_reject_finalization_parser
  finalization_parser_kwargs: 
    attribution_map:
      alice:
        i_take_key: "alice"
        other_takes_key: "bob"
      bob:
        i_take_key: "bob"
        other_takes_key: "alice"

  intro_prompt: |
      Welcome, you are participating in a negotiation game.
      You are playing as the agent named {agent_name}.
      The other agent your are playing with is named {coagent_name}.
      Game Description:
      In this game, two agents bargain over how to divide items over multiple rounds. Each agent only knows their own item values. Each item has different values for each agent. Each agent submits their own proposal for how to divide the items. 
  dond_version_specificities: |
    Each round is played as follows:
    1) One agent is designated as the starting agent
    2) The starting agent sends a message
    3) The second agent sends a message
    4) The starting agent sends a finalization
    5) The second agent either accepts or rejects the starting agent's finalization
    6) If the second agent accepts the starting agent's finalization, the items are divided accordingly and each agent receives the corresponding points. Else, both agents receive 0 points for that round.

    The first finalization will be revealed automatically to the other agent. However, by default, the values of the items are not revealed to the other agent. You are strongly encourage to use your message to discuss about item values with the other agent.

    Each agent can only send 1 message per round.
    The starting agent alternates each round.

    Your round points are calculated by multiplying the number of each item you get by how much you value that item. For example, if you get 7 coins and you value each coin at 5 points, you'll earn 35 points for the round.

    If the second agent rejects the starting agent's finalization, both agents receive 0 points for that round.

  message_mechanics_prompt: |
    Your messages must be sent in the <message> your-message-here </message> format, with no content outside the tags. They should be concise - less than 400 characters.

  finalization_mechanics_prompt: |
    When finalizing, different formats are required depending on whether you are the first or second to finalize:

    1) If you are the FIRST agent to finalize (when the other agent has not yet finalized):
       Your finalization must specify how items should be divided between both agents using this format:
       <finalize> {"{agent_name}": { "item1": x1, "item2": x2, ... }, "{other_agent_name}": { "item1": y1, "item2": y2, ... }} </finalize>
       where x1, x2, etc. are the quantities of each item you propose for yourself, and y1, y2, etc. are the quantities you propose for the other agent.
       The total for each item must equal the available quantity.

    2) If you are the SECOND agent to finalize (responding to the other agent's finalization):
       You must either accept or reject their proposal using one of these exact formats:
       <finalize>accept</finalize>  - If you agree with their division
       <finalize>reject</finalize>  - If you disagree with their division

  reasoning_mechanics_prompt: |
    ${prompt_blocks.dond_reasoning_mechanics}

  goal_prompt: |
    Your goal is to maximize the sum of your round points, not just a single round.

  first_round_prompt: |
    For this round, the items available are {quantities} and your values for each item category are {values}.

  new_round_prompt: |
    The previous round has ended.
    In the previous round, the values of the other agents were {last_round_coagent_values}.

    For this round, the items available are {quantities} and your values for each item category are {values}.
  agent_with_first_move_prompt: |
   You are the starting agent.
  agent_with_second_move_prompt: |
    You are the second agent.
  received_message_prompt: |
    The other agent sent the following message: {last_raw_response}.
  other_agent_finalized_prompt: |
    The other agent has finalized. Their finalization is: {last_raw_response}. You must either <finalize>accept</finalize> or <finalize>reject</finalize> their proposal.
  time_to_finalize_prompt: |
    (You must finalize now.)
  time_to_send_message_prompt: |
    (You must send a message now in the <message> your-message-here </message> format.)

matches:
  env_class: "DondEnv"
  agent_class: "DondAgent"

  max_length: 25
  continuation_prob: 0.85
  same_length_batch: True

  log_func: dond_log_match
  log_func_args:
    metrics_func: gather_dond_statistics
    metrics_func_args:
      format_options: ["by_agent"]
      stats_to_log: [
      "agreement_percentage",
      "points",
      "points_on_agreement",
      "items_given_to_self_percentage",
      "more_items_to_value_more_percentage",
      "points_difference_on_agreement",
      "optimal_points_difference_on_agreement",
      "split_equal_points_difference_on_agreement",
      "total_points_difference_on_agreement",
      "total_optimal_points_difference_on_agreement",
      "total_points_difference",
      "total_points_difference_on_agreement",
      "total_agreement_percentage",
      ]

  stop_condition: game_over_condition
  stop_condition_kwargs: {}

  run_batched_matches_args:
    nb_parallel_matches: -1


  env_kwargs:
    agents: ['alice', 'bob']
    max_messages: 1
    min_messages: 1
    max_chars_per_message: 450
    mode: basic
    random_setup_func: independent_random_vals
    random_setup_kwargs:
      items: ["coins"]
      min_quant: 10
      max_quant: 10
      min_val: 1
      max_val: 20
    role_assignator_func: alternating_role_assignator
    role_assignator_func_kwargs: {}
    points_attribution_method: negotiation_payoff
    points_attributions_kwargs: {}

  agents:
    alice:
      kwargs:
        <<: *common_agent_kwargs
        agent_name: "alice"
        policy_id: "llama/default"

    bob:
      kwargs:
        <<: *common_agent_kwargs
        agent_name: "bob"
        policy_id: "llama/default"

temperature: 0.7


common_models_init_args: &common_models_init_args
  max_model_length: 10000
  include_value_head: false
  device: "cuda"
  model_name: "meta-llama/Llama-3.1-8B-Instruct"
  pretrained_args:
    pretrained_model_name_or_path: ${models.llama.init_args.model_name}
    torch_dtype: "bfloat16"
    device_map: "auto"
    attn_implementation: "flash_attention_2"
  bits_and_bytes_args: null
    #load_in_8bit: False
    #load_in_4bit: true
  lora_args:
    task_type: CAUSAL_LM
    r: 64
    lora_alpha: 128
    lora_dropout: 0.0
    target_modules: "all-linear"

  generation_args:
    max_new_tokens: 120
    do_sample: True
    temperature: ${temperature}
    top_k: 0
    top_p: 1.0
    repetition_penalty: 1

  vllm_params:
    max_model_len : 13e3
    gpu_memory_utilization: 0.6
    enable_prefix_caching: True
    enable_sleep_mode : True

  keep_vllm_during_training: False
  keep_hf_during_training: True
  keep_hf_during_eval: False
  keep_vllm_during_eval: True
  eval_with: "vllm"
  train_with: "hf"
  optimizer_method: "Adam"
  optimizer_kwargs:
    lr: 1e-6
    weight_decay: 0.0

models:

  llama:
    class: local_llm
    init_args:
      <<: *common_models_init_args
      name: 'llama'
      adapter_names: ['default']


####################################################################################################
# TRAINING
####################################################################################################

common_training_agent_kwargs: &common_training_agent_kwargs
  training_data_func: generate_training_data_from_raw
  training_data_func_args:
    exclude_errors: False
    debug_output: True
    score_method: rloo_scores
    score_method_kwargs:
      discount_factor: 1.0

default_kwargs: &default_kwargs
  train_func_args:
    gradient_checkpointing: true
    temperature: ${temperature}
    entropy_coef: 0.0
    kl_loss_coef: 0.0
  train_data_args:
    average_score_over_message: False

training:

  agents:
    alice:
      <<: *common_training_agent_kwargs
    bob:
      <<: *common_training_agent_kwargs

  llama:
    adapters:
      default:
        train_func: train_reinforce_main
        <<: *default_kwargs
      # ad_bob:
      #   train_func: train_reinforce_main
      #   <<: *default_kwargs


####################################################################################################
# PROMPT DEFINITIONS
####################################################################################################

prompt_blocks:

  initial_play_prompt: |
    You are the first agent. It is your turn to play. [Msg Limits → {remaining_messages}]

  message_prompt: |
    Other agent's message: <message>{last_message}</message>. [Msg Limits → {remaining_messages}]

  visible_finalization_prompt: |
    Other agent's Finalization: {other_agent_finalization}. [Msg Limits → {remaining_messages}]

  hidden_finalization_prompt: |
    The other agent has submitted their finalization. It is now your turn to finalize. [Msg Limits → {remaining_messages}]


############################################################
# Ultimatum Game Prompts
############################################################

  barebone_ultimatum: |
    Welcome, you are playing the splitting game.
    Game Description:
      1) In this game, two agents divide 10 coins among themselves.
      2) A finalization is a proposed division of the coins between the two agents.
      3) The first agent will make a finalization.
      The second agent must then make his finalization.
      Each agent can make a single finalization for the entire game, hence the name.
      4) In order for both agents to agree, the finalizations must be complementary. If no agreement is reached between the two agents with the two finalizations, both agents will receive zero points. If agreement is reached, the agents will receive the coins corresponding to the finalizations.
    Response Formatting:
      1) All of your responses must be within <finalize></finalize> tags.
      2) The division must be in a JSON-parsable format. Formatting: Final division: <finalize> {"i_take": {"coins": x}, "other_agent_gets": {"coins": y}} </finalize> where "i_take" represents your share and "other_agent_gets" represents the other agent's share of the coins.

  ultimatum_game_multiple_rounds: |
    Welcome, you are playing a multi-round splitting game.
    Game Description:
      1) In this game, two agents will divide a collection of coins over multiple rounds.
      2) In each round, the available coins must be divided between both agents.
      3) In every round, both agents submit a finalization proposal outlining how the coins are split.
      4) If the two agents do not propose the same split, both agents receive zero points for that round.
      5) Once a agent has proposed a split, the other agent must also propose a split.
      6) Both agents are assigned a value for each coin. The points each agent receives are the product of the number of coins they get and the coin's value.
    Response Formatting:
      1) All your responses in each round must be enclosed within <finalize></finalize> tags.
      2) Specify the division in a JSON-parsable format. For example: <finalize> {"i_take": {"coins": x}, "other_agent_gets": {"coins": y}} </finalize> where the numbers represent the counts of each object allocated to you and to your opponent.

  unbiased_goal: null

  normal_goal: |
    Your points will be the number of coins you get at the end of the game.

  agressive_goal: |
    Your goal is to get as many coins as possible.

  agressive_pair_goal: |
    Your goal is to get as many coins as possible. This is also the goal of the other agent.

  fair_goal: |
    Goal: Aim to be fair with both the other agent and yourself.

  submitted_goal: |
    Goal: Your goal is to do exactly what the other agent wants. You must make the other agent happy.

############################################################
#                                                          #
#                      DOND Game Prompts                   #
#                                                          #
############################################################


  dond_game_multiple_rounds: |
    Welcome, you are participating in a multi-round negotiation game.
    Game Description:
      1) In this game, two agents will divide a collection of items over multiple rounds.
      2) In each round, the available items of each category ({items}) and their corresponding quantities will be dynamically specified.
      3) In each round, the different item categories will have different values for each agent.
      4) The points of each agent in each round is determined by multiplying the number of items they receive by the value assigned to each of their item.
      5) Both agents must submit a finalization, indicating how they wish to split the items.
      6) If the finalization of both agents do not match, neither agent earns points for that round.


  dond_normal_goal: |
    The points attributed to each agent will be computed as the cumulative sum of their points over rounds, where each agent's round score is determined by multiplying the quantity of each item they receive by the value they assign to each item.

  dond_optimal_goal: |
    The points attributed to each agent will be computed as the cumulative sum of their points over rounds, where each agent's round score is determined by multiplying the quantity of each item they receive by the value they assign to each item. The right strategy here is not to be naively greedy. The right strategy is as follows: 1) Reveal your values in your messages. Your coagent will do the same. 2) Together, find the agent who values the items the most in the current round. 3) Give the items to the agent who values them the most. That way, both agents will maximize their expected sum of points over rounds. Your goal is to perform this strategy with your coagent. Please follow this strategy with your coagent.

  dond_goal_long_term: |
    The points attributed to each agent will be computed as the cumulative sum of their points over rounds, where each agent's round score is determined by multiplying the quantity of each item they receive by the value they assign to each item. What matters is the total points each agent has accumulated over all rounds, not the points they have accumulated in each round. This is not a zero-sum game. It is a general-sum game.

  dond_agressive_goal: |
    Your goal is to maximize your cumulative points, calculated by adding up, over rounds, the products of each item's quantity and the associated value (for you) at corresponding rounds. Aim for the highest possible total!

  dond_agressive_pair_goal: |
    Your goal is to maximize your cumulative points, calculated by adding up, over rounds, the products of each item's quantity and the associated value (for you) at corresponding rounds. This is also the goal of your opponent.

  dond_fair_goal: |
    Goal: Aim to be fair with both the other agent and yourself. Remember, your points are awarded as the cumulative sum over rounds, with each round's score computed by multiplying the number of items received by their respective values.

  dond_submitted_goal: |
    Goal: Your objective is to exactly follow the other agent's preferences to ensure their satisfaction. Note that your points accumulate over rounds as the product of the number of each item received and its corresponding value.

  first_round_prompt: |
    For this new round, the items available are {quantities} and your assigned values are {values}.

  new_round_prompt: |
    The previous round has ended. In the last round, you earned {last_round_points} points. For this new round, the items available are {quantities} and your assigned values are {values}.

  new_round_prompt_with_values: |
    The previous round has ended. In the last round, you earned {last_round_points_computed}. Your coagent earned {coagent_last_round_points_computed_other}. Up to now, you have accumulated {cumulative_round_points_your} points and your coagent has accumulated {cumulative_round_points_coagent} points. For this new round, the items available are {quantities} and your assigned values are {values}.



  dond_message_mechanics: |
    In order to communicate with the other agent, you are allowed to send messages (distinct from finalizations). You cannot send a message and a finalization in the same response.
    When sending a message, please follow these rules: 1) Enclose your message entirely within <message> and </message> tags. 2) Do not include any extraneous text outside these tags. 3) In each round, send at least {min_messages} and no more than {max_messages} messages, with each message containing up to {max_chars_per_message} characters. 4) You may send only one message per response. 5) Use your messages strategically.

  dond_reasoning_mechanics: |
    In order to think before you act, you are allowed to use {max_reasoning_chars} characters per round. When reasoning, please follow these rules; 1) Enclose your thought process within <think> and </think> tags. 2) Do not include extraneous content outside these tags. 3) Your reasoning is limited to {max_reasoning_chars} characters per response. 4) You are not obligated to reason at each response.

  dond_hidden_alternating_starting_agent: |
    In this version of the game, your finalization proposal (enclosed in <finalize> tags) will be hidden to your coagent. The values attributed to the items by other agents are hidden as well. However, there are no restrictions to what the agents are allowed to reveal themselves in their messages! Furthermore, in this version, agents alternate turns and the agent with the first move changes each round.

  dond_visible_alternating_starting_agent: |
    In this version of the game, your finalization proposal (enclosed in <finalize> tags) will be shown to your coagent. However, the values attributed to the items by other agents are hidden. However, there are no restrictions to what the agents are allowed to reveal themselves in their messages. Furthermore, in this version, agents alternate turns and the agent with the first move changes each round.

  dond_economic_version_specificities: |
    In this specific version of the game, each round is played as follows:

    1) One of the two agents is assigned as the starting agent.
    2) Starting agent sends a message
    3) Second agent sends a message
    4) Starting agent sends a finalization
    5) Second agent sends a finalization

    At each round, the starting agent assignation alternates.
